/** Module dependencies.*/

var app = require('../app');
var debug = require('debug')('rest-api-nodejs-mongodb:server');
var http = require('http');
const cluster = require('cluster');
const os = require('os');
var cron = require('node-cron');


/** Get port from environment and store in Express.*/
var port = normalizePort(process.env.PORT || 5000);
app.set('port', port);

/**Create HTTP server.*/

var server = http.createServer(app);
/* ********************************** Clustering method *********************************************** */

// Get number of CPU's
const no_of_cpu = os.cpus().length;

if(cluster.isMaster) {

  for(let i = 0; i < no_of_cpu; i++) {
    cluster.fork();
  }
  cluster.on('exit', (worker, code, signal) => {
    cluster.fork();
  });

  if(process.env.CRON_STATUS == "TRUE" || process.env.CRON_STATUS == true) {
    cron.schedule('* * * * *', async () => {
      console.log("Cron Running successful................................");
    });
  }

} else {
  server.listen(port);
}

/* ******************************* End Clustering method *********************************************** */

// server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Socket.io section 
const io = require("socket.io")(server, {
  cors: {
    origin: '*',
  },
});

io.on("connection", (socket) => {
  console.log("Connected to socket.io");
  socket.on("setup", (userData) => {
    socket.emit("connected");
  });
});


/**Normalize a port into a number, string, or false.*/
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/** Event listener for HTTP server "error" event.*/
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**Event listener for HTTP server "listening" event.*/
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
